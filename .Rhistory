}else if(weekdays(today) == "Thursday"){
if((today + 1) %in% holidaysList){
settleDays = 4
}else{
settleDays = 1
}
}else{
if((today + 1) %in% holidaysList){
settleDays = 2
}else{
settleDays = 1
}
}
settleDate = today + settleDays
if(length(as.numeric(cusipDef[which(cusipDef[,1] %in% cusip),"Coupon"]))!=0){
coupon = as.numeric(cusipDef[which(cusipDef[,1] %in% cusip),"Coupon"])
lastCoupon = as.Date(cusipDef[which(cusipDef[,1] %in% cusip),"Maturity"])
if(format(lastCoupon,"%m") != format(lastCoupon+1,"%m")){
endMonth = TRUE
}else{
endMonth = FALSE
}
if(endMonth){
while(lastCoupon > settleDate){
lastCoupon = seq(as.Date(cut(lastCoupon, "month")), length=2, by="-5 month")[2]-1
}
}else{
while(lastCoupon > settleDate){
lastCoupon = seq(lastCoupon, length = 2, by = "-6 months")[2]
}
}
if(endMonth){
iterator = 1
while(format(lastCoupon,"%m") == format(lastCoupon+1,"%m")){
lastCoupon = lastCoupon + 1
iterator = iterator + 1
}
}
nextCoupon = lastCoupon %m+% months(6)
if(endMonth){
iterator = 1
while(format(nextCoupon,"%m") == format(nextCoupon+1,"%m")){
nextCoupon = nextCoupon + 1
iterator = iterator + 1
}
}
daysBetweenCoupons = as.numeric(nextCoupon - lastCoupon)
if(settleDate == nextCoupon){
dirtyPrice = closePrice
}else{
daysCouponAccrual = as.numeric(settleDate - lastCoupon)
dirtyPrice = closePrice + coupon*daysCouponAccrual/(2*daysBetweenCoupons)
}
couponAccrual = coupon*repoDays/(2*daysBetweenCoupons)
if(dim(rcgWI)[1]!=0){
if(length(which(rcgWIUnique %in% cusip))!=0){
if(Sys.Date() <= as.Date(paste(substr(as.character(Sys.Date()),1,8),"16"))){
settleDate = as.Date(paste(substr(as.character(Sys.Date()),1,8),"15"))
}else{
settleDate = as.Date(cut(Sys.Date()%m+%months(1),"month"))-1
}
if(as.Date(today + 1) < settleDate){
couponAccrual = 0
}
}
}
dirtyPrice = (closePrice + couponAccrual)
todaysAcc[1,j+1] = couponAccrual
todaysDirtyPx[1,j+1] = dirtyPrice
todaysNumDays[1,j+1] = repoDays
}
}
}
rs = dbSendQuery(mydb, "select * from closes_dirty_price")  ###read from database
currentDirtyPx = fetch(rs, n=-1)
rs = dbSendQuery(mydb, "select * from closes_coupon_accrual")  ###read from database
currentAcc = fetch(rs, n=-1)
rs = dbSendQuery(mydb, "select * from closes_repo_days")  ###read from database
currentNumDays = fetch(rs, n=-1)
#       currentDirtyPx = currentDirtyPx[-nrow(currentDirtyPx),]
#       currentAcc = currentAcc[-nrow(currentAcc),]
#       currentNumDays = currentNumDays[-nrow(currentNumDays),]
if(currentDirtyPx[nrow(currentDirtyPx),1] != todaysDirtyPx[1,1]){
dbTable = merge(currentDirtyPx,todaysDirtyPx,by = intersect(colnames(currentDirtyPx),colnames(todaysDirtyPx)),all = T)
if(dim(dbTable)[1] != 0){
dbWriteTable(mydb,name = "closes_dirty_price", value = as.data.frame(dbTable),overwrite = TRUE,append = FALSE,
row.names = FALSE,col.names = F)
}
dbTable = merge(currentAcc,todaysAcc,by = intersect(colnames(currentAcc),colnames(todaysAcc)),all = T)
if(dim(dbTable)[1] != 0){
dbWriteTable(mydb,name = "closes_coupon_accrual", value = as.data.frame(dbTable),overwrite = TRUE,append = FALSE,
row.names = FALSE,col.names = F)
}
dbTable = merge(currentNumDays,todaysNumDays,by = intersect(colnames(currentNumDays),colnames(todaysNumDays)),all = T)
if(dim(dbTable)[1] != 0){
dbWriteTable(mydb,name = "closes_repo_days", value = as.data.frame(dbTable),overwrite = TRUE,append = FALSE,
row.names = FALSE,col.names = F)
}
}
library(RMySQL)
library(openxlsx)
library(xlsx)
for(cons in dbListConnections(MySQL())){
dbDisconnect(cons)
}
dbListConnections(MySQL())
mydb = dbConnect(MySQL(),
user='root',
password='Taras25031991',
dbname='hgt_database',
host='10.128.135.197')
#symbols = c("tu","fv","ty","us","wn","ub","rx","g","cl","ng","xb","gc","si","hg","ec","bp","jy","ad","cd","c","s","w","sp","ed","es","tn","oat","ik","vg","nh","nq","sf",
#            "gx","dm","z","ux")
symbols = c("tu","fv","ty","us","wn","cl","ng","xb","gc","si","hg","ec","bp","jy","ad","cd","c","s","w","sp","ed","es","tn","nh","nq","sf","dm","ux")
#symbols = c("ub","rx","g","oat","ik","vg","gx","z")
holiday = "2018-02-19"
for(j in 1:length(symbols)){
if(symbols[j] == "tn"){
symbols[j] = "uxy"
}
query = paste("select * from futures_",symbols[j],sep="")
rs = dbSendQuery(mydb, query)  ###read from database
data = fetch(rs, n=-1)
if(length(which(data[,1] %in% holiday)) != 0){
stop("HOLIDAY IS PRESENT IN THE DATABASE")
data = data[-(which(data[,1] %in% holiday)),]
}else{
if(!any(data[,1] %in% holiday)){
print(symbols[j])
data = rbind(data,data[nrow(data),])
data[nrow(data),1] = holiday
dbWriteTable(mydb,name = paste("futures_",symbols[j],sep = ""), value = as.data.frame(data),
overwrite = TRUE,append = FALSE,row.names = FALSE,col.names = F)
}
}
}
library(RMySQL)
library(openxlsx)
#library(xlsx)
options(scipen=999)
for(cons in dbListConnections(MySQL())){
dbDisconnect(cons)
}
dbListConnections(MySQL())
mydb = dbConnect(MySQL(),
user='root',
password='Taras25031991',
dbname='hgt_database',
host='10.128.135.197')
rs = dbSendQuery(mydb, "select * from chadford_eod_positions")  ###read from database
positions = fetch(rs, n=-1)
tDay = "20180216"
View(positions)
library(RMySQL)
library(openxlsx)
#library(xlsx)
options(scipen=999)
for(cons in dbListConnections(MySQL())){
dbDisconnect(cons)
}
dbListConnections(MySQL())
mydb = dbConnect(MySQL(),
user='root',
password='Taras25031991',
dbname='hgt_database',
host='10.128.135.197')
rs = dbSendQuery(mydb, "select * from chadford_eod_positions")  ###read from database
positions = fetch(rs, n=-1)
tDay = "20180216"
############################### REMOVE LINE ITEMS FROM SOD POSITIONS
cusip = "11383EG8P 2600"
positions[which( (positions[,"Date"] %in% tDay) & (positions[,"EOD_Tags"] %in% cusip) ) ,"EOD_Pos"]
positions[which( (positions[,"Date"] %in% tDay) & (positions[,"EOD_Tags"] %in% cusip) ) ,]
View(positions)
library(RMySQL)
library(openxlsx)
#library(xlsx)
options(scipen=999)
for(cons in dbListConnections(MySQL())){
dbDisconnect(cons)
}
dbListConnections(MySQL())
mydb = dbConnect(MySQL(),
user='root',
password='Taras25031991',
dbname='hgt_database',
host='10.128.135.197')
rs = dbSendQuery(mydb, "select * from chadford_eod_positions")  ###read from database
positions = fetch(rs, n=-1)
tDay = "20180216"
############################### REMOVE LINE ITEMS FROM SOD POSITIONS
cusip = "11383EG8P 2600"
positions = positions[ -which( (positions[,"Date"] %in% tDay) & (positions[,"EOD_Tags"] %in% cusip) ) ,]
View(positions)
dbWriteTable(mydb,"chadford_eod_positions", value = as.data.frame(positions),
overwrite = TRUE,append = FALSE,row.names = FALSE,col.names = F)
############################################################ APPENDING THIS AT THE SAME TIME WHEN APPENDING OTR YIELDS
library(openxlsx)
library(RMySQL)
library(RQuantLib)
library(chron)
library(tseries)
library(PerformanceAnalytics)
library(Rblpapi)
blpConnect()
options(stringsAsFactors = F)
options(scipen=999)
for(cons in dbListConnections(MySQL())){
dbDisconnect(cons)
}
dbListConnections(MySQL())
mydb = dbConnect(MySQL(),
user='root',
password='Taras25031991',
dbname='hgt_database',
host='10.128.135.197')
rs = dbSendQuery(mydb, "select * from closes_active_cusips")  ###read from database
activeCusips = fetch(rs, n=-1)
rs = dbSendQuery(mydb, "select * from cusip_information")  ###read from database
cusip_info = fetch(rs, n=-1)
rs = dbSendQuery(mydb, "select * from series_bills")  ###read from database
dbTable = fetch(rs, n=-1)
View(dbTable)
dbTable = dbTable[-nrow(dbTable),]
dbTable = dbTable[-nrow(dbTable),]
View(dbTable)
View(activeCusips)
tDay = activeCusips[nrow(activeCusips)-1,1]
tDay
dbBills = dbTable[nrow(dbTable),2:ncol(dbTable)]
dbBills = as.character(dbBills[!is.na(dbBills)])
allCusips = unlist(strsplit(activeCusips[which(activeCusips[,1] %in% tDay),"active_cusips"],split = ","))
billCusips = allCusips[grepl("9127",allCusips)]
maxMaturity = 52 ###### 52 weeks
################################## REMOVE CASH MANAGEMENT BILLS
cmbBills = ""
for(bill in billCusips){
if(grepl("CMB",as.character(bdp(paste(bill,"govt"),"SECURITY_DESCRIPTION_RT")[1,1]))){
print(bill)
cmbBills = c(cmbBills,bill)
}
}
cmbBills = cmbBills[-1]
billCusips = setdiff(billCusips,cmbBills)
if(length(setdiff(billCusips,dbBills)) > 0){  ##### THERE ARE NEW BILLS
maturityArray = sapply(billCusips, function(x) as.character(as.Date(bdp(paste0(x," govt"),"MATURITY")[1,1])))
maturityArray = maturityArray[order(as.Date(maturityArray))]
billCusips = billCusips[order(as.Date(maturityArray))] ####### SORTED BY MATURITY, OLDER ARE CLOSER TO THE BEGINING
dayRow = rep(NA,maxMaturity + 1)  ### BILLS ARE FROM 1 TO 52 WEEKS
dayRow[1] = as.character(tDay)
for(week in maxMaturity:1){
if(length(which(ceiling(as.numeric(as.Date(maturityArray) - as.Date(tDay))/7) == week)) == 1){
dayRow[length(dayRow) - week + 1] = names(maturityArray)[ceiling(as.numeric(as.Date(maturityArray) - as.Date(tDay))/7) == week]
}else if(length(which(ceiling(as.numeric(as.Date(maturityArray) - as.Date(tDay))/7) == week)) == 2){
dayRow[length(dayRow) - week + 1] = names(maturityArray)[which(ceiling(as.numeric(as.Date(maturityArray) - as.Date(tDay))/7) == week)[1]]
}else if(length(which(ceiling(as.numeric(as.Date(maturityArray) - as.Date(tDay))/7) == week)) > 2){
stop("TOO MUCH CUSIPS IN A BUCKET")
}
}
dayRow = t(as.data.frame(dayRow))
colnames(dayRow) = c("Date",maxMaturity:1)
dbTable = merge(dbTable,dayRow,by = intersect(colnames(dbTable),colnames(dayRow)),all = T)
}else{
dbTable = rbind(dbTable,dbTable[nrow(dbTable),])
dbTable[1,1] = tDay
}
View(dbTable)
tDay
############################################################ APPENDING THIS AT THE SAME TIME WHEN APPENDING OTR YIELDS
library(openxlsx)
library(RMySQL)
library(RQuantLib)
library(chron)
library(tseries)
library(PerformanceAnalytics)
library(Rblpapi)
blpConnect()
options(stringsAsFactors = F)
options(scipen=999)
for(cons in dbListConnections(MySQL())){
dbDisconnect(cons)
}
dbListConnections(MySQL())
mydb = dbConnect(MySQL(),
user='root',
password='Taras25031991',
dbname='hgt_database',
host='10.128.135.197')
rs = dbSendQuery(mydb, "select * from closes_active_cusips")  ###read from database
activeCusips = fetch(rs, n=-1)
rs = dbSendQuery(mydb, "select * from cusip_information")  ###read from database
cusip_info = fetch(rs, n=-1)
rs = dbSendQuery(mydb, "select * from series_bills")  ###read from database
dbTable = fetch(rs, n=-1)
View(dbTable)
dbTable = dbTable[-nrow(dbTable),]
dbTable = dbTable[-nrow(dbTable),]
tDay = activeCusips[nrow(activeCusips)-1,1]
dbBills = dbTable[nrow(dbTable),2:ncol(dbTable)]
dbBills = as.character(dbBills[!is.na(dbBills)])
allCusips = unlist(strsplit(activeCusips[which(activeCusips[,1] %in% tDay),"active_cusips"],split = ","))
billCusips = allCusips[grepl("9127",allCusips)]
maxMaturity = 52 ###### 52 weeks
################################## REMOVE CASH MANAGEMENT BILLS
cmbBills = ""
for(bill in billCusips){
if(grepl("CMB",as.character(bdp(paste(bill,"govt"),"SECURITY_DESCRIPTION_RT")[1,1]))){
print(bill)
cmbBills = c(cmbBills,bill)
}
}
cmbBills = cmbBills[-1]
billCusips = setdiff(billCusips,cmbBills)
length(setdiff(billCusips,dbBills))
length(setdiff(billCusips,dbBills)) > 0
dbTable = rbind(dbTable,dbTable[nrow(dbTable),])
############################################################ APPENDING THIS AT THE SAME TIME WHEN APPENDING OTR YIELDS
library(openxlsx)
library(RMySQL)
library(RQuantLib)
library(chron)
library(tseries)
library(PerformanceAnalytics)
library(Rblpapi)
blpConnect()
options(stringsAsFactors = F)
options(scipen=999)
for(cons in dbListConnections(MySQL())){
dbDisconnect(cons)
}
dbListConnections(MySQL())
mydb = dbConnect(MySQL(),
user='root',
password='Taras25031991',
dbname='hgt_database',
host='10.128.135.197')
rs = dbSendQuery(mydb, "select * from closes_active_cusips")  ###read from database
activeCusips = fetch(rs, n=-1)
rs = dbSendQuery(mydb, "select * from cusip_information")  ###read from database
cusip_info = fetch(rs, n=-1)
rs = dbSendQuery(mydb, "select * from series_bills")  ###read from database
dbTable = fetch(rs, n=-1)
dbTable = dbTable[-nrow(dbTable),]
dbTable = dbTable[-nrow(dbTable),]
View(dbTable)
dbTable[1,1] = "2013-03-07"
tDay = activeCusips[nrow(activeCusips)-1,1]
dbBills = dbTable[nrow(dbTable),2:ncol(dbTable)]
dbBills = as.character(dbBills[!is.na(dbBills)])
allCusips = unlist(strsplit(activeCusips[which(activeCusips[,1] %in% tDay),"active_cusips"],split = ","))
billCusips = allCusips[grepl("9127",allCusips)]
maxMaturity = 52 ###### 52 weeks
################################## REMOVE CASH MANAGEMENT BILLS
cmbBills = ""
for(bill in billCusips){
if(grepl("CMB",as.character(bdp(paste(bill,"govt"),"SECURITY_DESCRIPTION_RT")[1,1]))){
print(bill)
cmbBills = c(cmbBills,bill)
}
}
cmbBills = cmbBills[-1]
billCusips = setdiff(billCusips,cmbBills)
if(length(setdiff(billCusips,dbBills)) > 0){  ##### THERE ARE NEW BILLS
maturityArray = sapply(billCusips, function(x) as.character(as.Date(bdp(paste0(x," govt"),"MATURITY")[1,1])))
maturityArray = maturityArray[order(as.Date(maturityArray))]
billCusips = billCusips[order(as.Date(maturityArray))] ####### SORTED BY MATURITY, OLDER ARE CLOSER TO THE BEGINING
dayRow = rep(NA,maxMaturity + 1)  ### BILLS ARE FROM 1 TO 52 WEEKS
dayRow[1] = as.character(tDay)
for(week in maxMaturity:1){
if(length(which(ceiling(as.numeric(as.Date(maturityArray) - as.Date(tDay))/7) == week)) == 1){
dayRow[length(dayRow) - week + 1] = names(maturityArray)[ceiling(as.numeric(as.Date(maturityArray) - as.Date(tDay))/7) == week]
}else if(length(which(ceiling(as.numeric(as.Date(maturityArray) - as.Date(tDay))/7) == week)) == 2){
dayRow[length(dayRow) - week + 1] = names(maturityArray)[which(ceiling(as.numeric(as.Date(maturityArray) - as.Date(tDay))/7) == week)[1]]
}else if(length(which(ceiling(as.numeric(as.Date(maturityArray) - as.Date(tDay))/7) == week)) > 2){
stop("TOO MUCH CUSIPS IN A BUCKET")
}
}
dayRow = t(as.data.frame(dayRow))
colnames(dayRow) = c("Date",maxMaturity:1)
dbTable = merge(dbTable,dayRow,by = intersect(colnames(dbTable),colnames(dayRow)),all = T)
}else{
dbTable = rbind(dbTable,dbTable[nrow(dbTable),])
dbTable[nrow(dbTable),1] = tDay
}
View(dbTable)
dbWriteTable(mydb,name = "series_bills", value = as.data.frame(dbTable),overwrite = TRUE,append = FALSE,
row.names = FALSE,col.names = F)
############################################################ APPENDING THIS AT THE SAME TIME WHEN APPENDING OTR YIELDS
library(openxlsx)
library(RMySQL)
library(RQuantLib)
library(chron)
library(tseries)
library(PerformanceAnalytics)
library(Rblpapi)
blpConnect()
options(stringsAsFactors = F)
options(scipen=999)
for(cons in dbListConnections(MySQL())){
dbDisconnect(cons)
}
dbListConnections(MySQL())
mydb = dbConnect(MySQL(),
user='root',
password='Taras25031991',
dbname='hgt_database',
host='10.128.135.197')
rs = dbSendQuery(mydb, "select * from closes_active_cusips")  ###read from database
activeCusips = fetch(rs, n=-1)
rs = dbSendQuery(mydb, "select * from cusip_information")  ###read from database
cusip_info = fetch(rs, n=-1)
rs = dbSendQuery(mydb, "select * from series_bills")  ###read from database
dbTable = fetch(rs, n=-1)
tDay = activeCusips[nrow(activeCusips),1]
dbBills = dbTable[nrow(dbTable),2:ncol(dbTable)]
dbBills = as.character(dbBills[!is.na(dbBills)])
allCusips = unlist(strsplit(activeCusips[which(activeCusips[,1] %in% tDay),"active_cusips"],split = ","))
billCusips = allCusips[grepl("9127",allCusips)]
maxMaturity = 52 ###### 52 weeks
################################## REMOVE CASH MANAGEMENT BILLS
cmbBills = ""
for(bill in billCusips){
if(grepl("CMB",as.character(bdp(paste(bill,"govt"),"SECURITY_DESCRIPTION_RT")[1,1]))){
print(bill)
cmbBills = c(cmbBills,bill)
}
}
cmbBills = cmbBills[-1]
billCusips = setdiff(billCusips,cmbBills)
if(length(setdiff(billCusips,dbBills)) > 0){  ##### THERE ARE NEW BILLS
maturityArray = sapply(billCusips, function(x) as.character(as.Date(bdp(paste0(x," govt"),"MATURITY")[1,1])))
maturityArray = maturityArray[order(as.Date(maturityArray))]
billCusips = billCusips[order(as.Date(maturityArray))] ####### SORTED BY MATURITY, OLDER ARE CLOSER TO THE BEGINING
dayRow = rep(NA,maxMaturity + 1)  ### BILLS ARE FROM 1 TO 52 WEEKS
dayRow[1] = as.character(tDay)
for(week in maxMaturity:1){
if(length(which(ceiling(as.numeric(as.Date(maturityArray) - as.Date(tDay))/7) == week)) == 1){
dayRow[length(dayRow) - week + 1] = names(maturityArray)[ceiling(as.numeric(as.Date(maturityArray) - as.Date(tDay))/7) == week]
}else if(length(which(ceiling(as.numeric(as.Date(maturityArray) - as.Date(tDay))/7) == week)) == 2){
dayRow[length(dayRow) - week + 1] = names(maturityArray)[which(ceiling(as.numeric(as.Date(maturityArray) - as.Date(tDay))/7) == week)[1]]
}else if(length(which(ceiling(as.numeric(as.Date(maturityArray) - as.Date(tDay))/7) == week)) > 2){
stop("TOO MUCH CUSIPS IN A BUCKET")
}
}
dayRow = t(as.data.frame(dayRow))
colnames(dayRow) = c("Date",maxMaturity:1)
dbTable = merge(dbTable,dayRow,by = intersect(colnames(dbTable),colnames(dayRow)),all = T)
}else{
dbTable = rbind(dbTable,dbTable[nrow(dbTable),])
dbTable[nrow(dbTable),1] = tDay
}
View(dbTable)
dbWriteTable(mydb,name = "series_bills", value = as.data.frame(dbTable),overwrite = TRUE,append = FALSE,
row.names = FALSE,col.names = F)
library(chron)
setwd("Y:/Workspace/R projects/3rd Pivot Scanner/")
load("today_data.RData")
remove(apiUrl)
library(openxlsx)
library(RMySQL)
library(RQuantLib)
library(combinat)
library(zoo)
library(RDCOMClient)
library(chron)
library(jrvFinance)
library(MASS)
library(r2tt)
library(httr)
library(jsonlite)
library(plyr)
library(lubridate)
library(stringr)
selectEnvironment("SIM")
options(digits = 12)
options(scipen=999)
options(stringsAsFactors = F)
for(cons in dbListConnections(MySQL())){
dbDisconnect(cons)
}
dbListConnections(MySQL())
mydb = dbConnect(MySQL(),
user='root',
password='Taras25031991',
dbname='hgt_database',
host='10.128.135.197')
rs = dbSendQuery(mydb, "select * from 3rd_pivot")  ###read from database
inPivot = fetch(rs, n=-1)
holidays = read.csv("Y:/Workspace/R projects/Price Index/Historical_Holidays.csv")
holidays = as.character(as.Date(holidays[,1],"%m/%d/%Y")))
holidays = read.csv("Y:/Workspace/R projects/Price Index/Historical_Holidays.csv")
holidays = as.character(as.Date(holidays[,1],"%m/%d/%Y"))
holidays
library(chron)
setwd("Y:/Workspace/R projects/3rd Pivot Scanner/")
load("today_data.RData")
remove(apiUrl)
holidays = read.csv("Y:/Workspace/R projects/Price Index/Historical_Holidays.csv")
holidays = as.character(as.Date(holidays[,1],"%m/%d/%Y"))
yest = ifelse(chron::is.weekend(tDay-1),as.character(tDay-3),as.character(tDay-1))
yest
Sys.time() > strptime("05:00","%H:%M") && Sys.time() < strptime("15:30","%H:%M") && !is.weekend(Sys.Date())
library(chron)
setwd("Y:/Workspace/R projects/3rd Pivot Scanner/")
load("today_data.RData")
remove(apiUrl)
holidays = read.csv("Y:/Workspace/R projects/Price Index/Historical_Holidays.csv")
holidays = as.character(as.Date(holidays[,1],"%m/%d/%Y"))
yest = ifelse(chron::is.weekend(tDay-1),as.character(tDay-3),as.character(tDay-1))
Sys.time() > strptime("05:00","%H:%M") && Sys.time() < strptime("15:30","%H:%M") && !is.weekend(Sys.Date())
Sys.time() > strptime("05:00","%H:%M") && Sys.time() < strptime("15:30","%H:%M") && !chron::is.weekend(Sys.Date())
Sys.time() > strptime("05:00","%H:%M") && Sys.time() < strptime("15:30","%H:%M") && !chron::is.weekend(Sys.Date()) && !(yest %in% holidays)
